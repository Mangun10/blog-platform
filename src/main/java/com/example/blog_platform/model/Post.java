package com.example.blog_platform.model;

import jakarta.persistence.*;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.AllArgsConstructor;
import java.util.List;
import java.time.LocalDateTime;

import com.fasterxml.jackson.annotation.JsonManagedReference;

/**
 * Represents a blog post entity. This class maps to a table in the database.
 * The annotations are used by Spring Data JPA and Hibernate to handle the
 * mapping and database operations.
 */
@Entity
@Table(name = "posts")
@Data // Lombok annotation to automatically generate getters, setters, toString(),
      // etc.
@NoArgsConstructor // Lombok annotation to generate a no-argument constructor
@AllArgsConstructor // Lombok annotation to generate a constructor with all arguments
public class Post {

    @Id // Marks this field as the primary key of the table
    @GeneratedValue(strategy = GenerationType.IDENTITY) // Specifies that the ID will be auto-generated by the database
    private Long id;

    @Column(nullable = false) // Defines this field as a column in the table and ensures it cannot be null
    private String title;

    @Lob // Indicates that this field will hold large amounts of text
    @Column(nullable = false)
    private String content;

    @Column(nullable = false)
    private String author;

    @Column(nullable = false)
    private String category; // New field for category

    @Column(name = "creation_date", updatable = false)
    private LocalDateTime creationDate;

    @Column(name = "featured_image")
    private String featuredImage; // URL for main post image

    @Column(name = "excerpt", length = 500)
    private String excerpt; // Short description for post cards

    @Column(name = "reading_time")
    private Integer readingTime; // Estimated reading time in minutes

    // A method that will be called before a new entity is persisted to set the
    // creation date.
    @PrePersist
    protected void onCreate() {
        this.creationDate = LocalDateTime.now();
        this.readingTime = calculateReadingTime();
    }

    @PreUpdate
    protected void onUpdate() {
        this.readingTime = calculateReadingTime();
    }

    private Integer calculateReadingTime() {
        if (content == null || content.isEmpty())
            return 0;
        // Average reading speed: 200 words per minute
        String textContent = content.replaceAll("<[^>]*>", ""); // Remove HTML tags
        int wordCount = textContent.split("\\s+").length;
        return Math.max(1, wordCount / 200);
    }

    @OneToMany(mappedBy = "post", cascade = CascadeType.ALL, orphanRemoval = true)
    @JsonManagedReference
    private List<Comment> comments;
}
